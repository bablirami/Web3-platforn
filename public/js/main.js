const { Transaction, Connection, clusterApiUrl } = window.solanaWeb3 || {};


// ======= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64 –≤ Uint8Array =======
function base64ToUint8Array(base64) {
  const binaryString = window.atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes;
}

// ========== –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–º ==========

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
 * –ï—Å–ª–∏ token –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å" –∏ "–í—ã–π—Ç–∏",
 * –∏–Ω–∞—á–µ ‚Äì –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ / –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è".
 *
 * @param {string|null} token - –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
 */
function updateAuthUI(token) {
  const authContainer = document.querySelector(".auth");
  if (!authContainer) return;

  authContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º

  if (token) {
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...");
    authContainer.innerHTML = `
      <a href="profile.html" class="btn profile-btn" data-i18n="profileBtn">–ü—Ä–æ—Ñ–∏–ª—å</a>
      <button class="btn logout-btn" data-i18n="logoutBtn">–í—ã–π—Ç–∏</button>
    `;
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
    const logoutBtn = authContainer.querySelector(".logout-btn");
    if (logoutBtn) {
      logoutBtn.addEventListener("click", logoutUser);
    }
  } else {
    console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...");
    authContainer.innerHTML = `
      <a href="login.html" class="btn auth-btn" data-i18n="authLogin">–í–æ–π—Ç–∏ / –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
    `;
  }
}

/**
 * –í—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã: —É–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞.
 */
function logoutUser() {
  console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...");
  localStorage.removeItem("authToken");
  updateAuthUI(null);
  window.location.href = "login.html"; // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ URL
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç ‚Äì –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.
 */
async function checkTokenExpiration() {
  const token = localStorage.getItem("authToken");
  if (!token) return;

  try {
    const payload = JSON.parse(atob(token.split(".")[1])); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload —Ç–æ–∫–µ–Ω–∞
    const exp = payload.exp * 1000; // –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const now = Date.now();

    if (exp - now < 5 * 60 * 1000) {
      console.log("‚è∞ –¢–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
      const response = await fetch("/api/refresh-token", {
        method: "POST",
        headers: { "Authorization": `Bearer ${token}` }
      });
      const data = await response.json();

      if (data.success && data.newToken) {
        console.log("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!");
        localStorage.setItem("authToken", data.newToken);
        updateAuthUI(data.newToken);
      } else {
        console.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.");
        logoutUser();
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    logoutUser();
  }
}

// ========== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ==========

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äì –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞.
 */
async function loadUserProfile() {
  const token = localStorage.getItem("authToken");
  if (!token) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
    window.location.href = "login.html";
    return;
  }

  try {
    const response = await fetch("/api/user-info", {
      method: "GET",
      headers: { "Authorization": `Bearer ${token}` }
    });
    const data = await response.json();

    if (data.success) {
      document.getElementById("username").textContent = data.username || "–ê–Ω–æ–Ω–∏–º";
      document.getElementById("walletAddress").textContent = data.wallet || "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω";
      document.getElementById("balance").textContent = `${data.balance} SOL`;
    } else {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", data.message);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
  }
}

// ========== –§—É–Ω–∫—Ü–∏–∏ Web3-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Solana) ==========

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∫–æ—à–µ–ª–µ–∫ Solana —á–µ—Ä–µ–∑ Phantom –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∞–¥—Ä–µ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
 */
async function connectWallet() {
  const errorContainer = document.getElementById("walletError"); // –ë–ª–æ–∫ –¥–ª—è –æ—à–∏–±–æ–∫

  if (!window.solana || !window.solana.isPhantom) {
    errorContainer.textContent = "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Phantom –∫–æ—à–µ–ª–µ–∫!";
    errorContainer.style.color = "red";
    return;
  }

  try {
    const response = await window.solana.connect();
    const walletAddress = response.publicKey.toString();
    const token = localStorage.getItem("authToken");

    if (!token) {
      errorContainer.textContent = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!";
      errorContainer.style.color = "red";
      return;
    }

    console.log("üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /api/connect-wallet:");
    console.log("walletAddress:", walletAddress);
    console.log("token:", token);

    const serverResponse = await fetch("/api/connect-wallet", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
      body: JSON.stringify({ walletAddress: walletAddress })
    });

    const data = await serverResponse.json();
    if (data.success) {
      errorContainer.textContent = "‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!";
      errorContainer.style.color = "green";
      
      const walletAddressElem = document.getElementById("walletAddress");
      if (walletAddressElem) {
        walletAddressElem.textContent = walletAddress;
      }
    } else {
      errorContainer.textContent = "–û—à–∏–±–∫–∞: " + data.message;
      errorContainer.style.color = "red";
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:", error);
    errorContainer.textContent = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    errorContainer.style.color = "red";
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
 * –ï—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.
 */
async function updateBalance() {
  const walletAddressElem = document.getElementById("walletAddress");
  if (!walletAddressElem) return;
  const walletAddress = walletAddressElem.textContent;
  if (!walletAddress || walletAddress === "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω") return;

  try {
    const response = await fetch(`/api/solana-balance?wallet=${walletAddress}`);
    const data = await response.json();
    if (data.success) {
      const balanceElem = document.getElementById("balance");
      if (balanceElem) {
        balanceElem.textContent = `${data.balance} SOL`;
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
  }
}

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫ –∏–∑ URL, localStorage –∏–ª–∏ cookie
function getSavedLanguage() {
  // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º URL (—Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  const urlParams = new URLSearchParams(window.location.search);
  const langFromURL = urlParams.get("lang");
  if (langFromURL) {
    console.log(`üîó –Ø–∑—ã–∫ –Ω–∞–π–¥–µ–Ω –≤ URL: ${langFromURL}`);
    return langFromURL;
  }

  // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  try {
    const langFromStorage = localStorage.getItem("selectedLanguage");
    if (langFromStorage) {
      console.log(`üìÇ –Ø–∑—ã–∫ –Ω–∞–π–¥–µ–Ω –≤ localStorage: ${langFromStorage}`);
      return langFromStorage;
    }
  } catch (e) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage, –∏—Å–ø–æ–ª—å–∑—É–µ–º cookie");
  }

  // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º cookie
  const matches = document.cookie.match(/(?:^|; )selectedLanguage=([^;]*)/);
  if (matches) {
    console.log(`üç™ –Ø–∑—ã–∫ –Ω–∞–π–¥–µ–Ω –≤ cookie: ${matches[1]}`);
    return matches[1];
  }

  // 4Ô∏è‚É£ –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  return null;
}

// ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤ localStorage, cookie –∏ URL (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
function saveLanguage(lang, updateURL = true) {
  try {
    localStorage.setItem("selectedLanguage", lang);
    console.log(`‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage: ${localStorage.getItem("selectedLanguage")}`);
  } catch (e) {
    console.warn("‚ö†Ô∏è localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ cookie");
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ cookie
  document.cookie = `selectedLanguage=${lang}; path=/; max-age=31536000; SameSite=Lax`;

  console.log(`üç™ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ cookie: ${document.cookie}`);

  // –û–±–Ω–æ–≤–ª—è–µ–º URL (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã–∑–æ–≤ –∏–∑ `loadSavedLanguage()`)
  if (updateURL) {
    const url = new URL(window.location);
    url.searchParams.set("lang", lang);
    window.history.replaceState({}, "", url);
  }
}

// ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
function loadSavedLanguage() {
  let savedLang = getSavedLanguage();

  if (!savedLang) {
    console.warn("‚ö†Ô∏è –Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π.");
    savedLang = "ru";
    saveLanguage(savedLang, false); // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º URL, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  }

  console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫: ${savedLang}`);
  translatePage(savedLang);
}


// ========== –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (i18n) ==========
const translations = {
  ru: {
    heroTitle: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –ø–µ—Ä–≤—ã–º–∏",
    heroSubtitle: "Margo on SOL",
    heroBtn: "–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
    navHome: "–ì–ª–∞–≤–Ω–∞—è",
    navAbout: "–û –Ω–∞—Å",
    navCollections: "–ö–æ–ª–ª–µ–∫—Ü–∏–∏",
    navDashboard: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    authLogin: "–í–æ–π—Ç–∏ / –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
    profileBtn: "–ü—Ä–æ—Ñ–∏–ª—å",
    logoutBtn: "–í—ã–π—Ç–∏",
    leftBlock1: "Solana Margo ‚Äì —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –±–ª–æ–∫—á–µ–π–Ω Solana –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–¥–æ–±—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
    leftBlock2: "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –≤–∞—Å. –ë–ª–æ–∫—á–µ–π–Ω Solana –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤. –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ ‚Äì —Ç–æ–ª—å–∫–æ —É –≤–∞—Å.",
    rightBlock1: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏, –∞–∏—Ä–¥—Ä–æ–ø—ã —Ç–æ–∫–µ–Ω–æ–≤, —Å–∫–∏–¥–∫–∏ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äì –≤—Å–µ —ç—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞—à–∏—Ö —Å–æ—Ü—Å–µ—Ç–µ–π. –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!",
    rightBlock2: "Margo ‚Äì —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∞ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞. –í–ª–∞–¥–µ–Ω–∏–µ –Ω–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, —Å–∫–∏–¥–∫–∞–º –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è —Å–µ–π—á–∞—Å, –ø–æ–∫–∞ –≤—Å–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!",
    loginTitle: "–í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
    loginHeader: "–í–æ–π—Ç–∏ –∏–ª–∏ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
    emailLabel: "Email:",
    passwordLabel: "–ü–∞—Ä–æ–ª—å:",
    loginButton: "–í–æ–π—Ç–∏",
    or: "–∏–ª–∏",
    registerButton: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
    solanaButton: "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª–µ–∫ Solana",
    forgotPassword: "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?",
    backButton: "–ù–∞–∑–∞–¥",
    collectionsTitle: "–ö–æ–ª–ª–µ–∫—Ü–∏–∏",
    filterAll: "–í—Å–µ",
    filterNew: "–ù–æ–≤—ã–µ",
    filterPopular: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ",
    collection1Title: "–ö–æ–ª–ª–µ–∫—Ü–∏—è 1",
    collection1Desc: "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
    collection1Price: "–¶–µ–Ω–∞: 0.5 SOL",
    collection2Title: "–ö–æ–ª–ª–µ–∫—Ü–∏—è 2",
    collection2Desc: "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
    collection2Price: "–¶–µ–Ω–∞: 1.0 SOL",
    collection3Title: "–ö–æ–ª–ª–µ–∫—Ü–∏—è 3",
    collection3Desc: "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
    collection3Price: "–¶–µ–Ω–∞: 2.0 SOL",
    buyButton: "–ö—É–ø–∏—Ç—å",
    openButton: "–û—Ç–∫—Ä—ã—Ç—å",
    collectionViewTitle: "–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
    backToCollections: "–ù–∞–∑–∞–¥ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º",
    dashboardTitle: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞",
    dashboardHeader: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    addCollection: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é",
    dropPreview: "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—é–¥–∞ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
    dropCollection: "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—é–¥–∞ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
    collectionTitleLabel: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
    collectionDescLabel: "–û–ø–∏—Å–∞–Ω–∏–µ",
    collectionPriceLabel: "–¶–µ–Ω–∞ –≤ SOL",
    uploadBtn: "–ó–∞–≥—Ä—É–∑–∏—Ç—å",
    uploadedCollections: "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
    tablePreview: "–ü—Ä–µ–≤—å—é",
    tableTitle: "–ù–∞–∑–≤–∞–Ω–∏–µ",
    tableViews: "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã",
    tableSales: "–ü—Ä–æ–¥–∞–∂–∏ (SOL)",
    tableActions: "–î–µ–π—Å—Ç–≤–∏—è",
    aboutTitle: "–û –Ω–∞—Å",
    aboutHeader: "–û –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ",
    aboutText1: "–ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –ø–æ–∫—É–ø–∫–∏ —ç—Ä–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã Solana.",
    aboutText2: "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—è–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚Äî —É–¥–æ–±–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
    featureFastTitle: "–¢–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –º–æ–¥–µ–ª–∏",
    featureFastDesc: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏ –Ω–æ–≤—ã—Ö –ª–∏—Ü, –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–∞–ø—Ä—è–º—É—é.",
    featureFeesTitle: "–ë—ã—Å—Ç—Ä—ã–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏",
    featureFeesDesc: "–ù–µ—Ç –∑–∞–¥–µ—Ä–∂–µ–∫ –∏ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ‚Äì –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ.",
    featureSecurityTitle: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å",
    featureSecurityDesc: "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞—â–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
    contactsTitle: "–ö–æ–Ω—Ç–∞–∫—Ç—ã",
    joinBtn: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º",
    connectWallet: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"
  },
  en: {
    heroTitle: "Exclusive collections available to you first",
    heroSubtitle: "Margo on SOL",
    heroBtn: "Explore Collections",
    navHome: "Home",
    navAbout: "About",
    navCollections: "Collections",
    navDashboard: "Dashboard",
    authLogin: "Login / Register",
    profileBtn: "Profile",
    logoutBtn: "Logout",
    leftBlock1: "Solana Margo is an innovative platform that uses the Solana blockchain to purchase exclusive content. We provide fast transactions, minimal fees, and maximum convenience for users.",
    leftBlock2: "Your data remains only with you. Solana blockchain provides full transparency and protection of transactions, eliminating intermediaries. Full control over funds is only with you.",
    rightBlock1: "Exclusive promotions, token airdrops, discounts and closed offers - all this is available to subscribers of our social networks. Don't miss the chance to earn and stay up to date with all the updates!",
    rightBlock2: "Margo is not just a platform, but an ecosystem. Owning our token gives you access to unique opportunities, discounts, and exclusive content. Join now while it's just getting started!",
    loginTitle: "Login / Register",
    loginHeader: "Login or Register",
    emailLabel: "Email:",
    passwordLabel: "Password:",
    loginButton: "Login",
    or: "or",
    registerButton: "Register",
    solanaButton: "Login with Solana Wallet",
    forgotPassword: "Forgot password?",
    backButton: "Back",
    collectionsTitle: "Collections",
    filterAll: "All",
    filterNew: "New",
    filterPopular: "Popular",
    collection1Title: "Collection 1",
    collection1Desc: "Short description of the collection",
    collection1Price: "Price: 0.5 SOL",
    collection2Title: "Collection 2",
    collection2Desc: "Short description of the collection",
    collection2Price: "Price: 1.0 SOL",
    collection3Title: "Collection 3",
    collection3Desc: "Short description of the collection",
    collection3Price: "Price: 2.0 SOL",
    buyButton: "Buy",
    openButton: "Open",
    collectionViewTitle: "Collection View",
    backToCollections: "Back to Collections",
    dashboardTitle: "Author Dashboard",
    dashboardHeader: "Dashboard",
    addCollection: "Add New Collection",
    dropPreview: "Drag & drop preview image here or click to select",
    dropCollection: "Drag & drop collection media here or click to select",
    collectionTitleLabel: "Collection Title",
    collectionDescLabel: "Description",
    collectionPriceLabel: "Price in SOL",
    uploadBtn: "Upload",
    uploadedCollections: "Uploaded Collections",
    tablePreview: "Preview",
    tableTitle: "Title",
    tableViews: "Views",
    tableSales: "Sales (SOL)",
    tableActions: "Actions",
    aboutTitle: "About Us",
    aboutHeader: "About Our Platform",
    aboutText1: "Our platform offers a unique experience of purchasing erotic content using the Solana cryptocurrency.",
    aboutText2: "We provide models with new monetization opportunities, and users with convenient and fast access to content without intermediaries and restrictions.",
    featureFastTitle: "Only the best models",
    featureFastDesc: "Exclusive content from popular and new faces, accessible directly.",
    featureFeesTitle: "Fast and automated payments",
    featureFeesDesc: "There are no delays or complicated processes ‚Äì everything works instantly.",
    featureSecurityTitle: "Security and anonymity",
    featureSecurityDesc: "Data encryption, transaction protection and complete user privacy.",
    contactsTitle: "Contacts",
    joinBtn: "Join Us",
    connectWallet: "Connect Wallet"
  }
};

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å data-i18n.
 * @param {string} lang - –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ ("ru" –∏–ª–∏ "en")
 */
// ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
function translatePage(lang) {
  if (!translations[lang]) {
    console.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —è–∑—ã–∫, —Å—Ç–∞–≤–∏–º 'ru'");
    lang = "ru";
  }

  console.log(`üåç –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥: ${lang}`);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å data-i18n
  document.querySelectorAll("[data-i18n]").forEach((el) => {
    const key = el.getAttribute("data-i18n");
    if (translations[lang] && translations[lang][key]) {
      el.textContent = translations[lang][key];
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  const currentLangElem = document.getElementById("currentLang");
  if (currentLangElem) {
    currentLangElem.textContent = lang.toUpperCase();
  }
}

// ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º —è–∑—ã–∫ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—ã–∑–æ–≤–µ–º —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑)
document.addEventListener("DOMContentLoaded", () => {
  console.log("üìå DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫...");
  loadSavedLanguage();

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–∞
  const languageDropdown = document.getElementById("languageDropdown");
  if (languageDropdown) {
    languageDropdown.querySelectorAll("li").forEach((item) => {
      item.addEventListener("click", (e) => {
        const selectedLang = e.target.getAttribute("data-lang");
        console.log(`üîò –í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —è–∑—ã–∫: ${selectedLang}`);
        saveLanguage(selectedLang); // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        translatePage(selectedLang);
      });
    });
  }
});

// ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–Ω–∞–∑–∞–¥" –±—Ä–∞—É–∑–µ—Ä –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —è–∑—ã–∫
window.addEventListener("pageshow", loadSavedLanguage);

// ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º –∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ==========

document.addEventListener("DOMContentLoaded", () => {
  console.log("main.js —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const token = localStorage.getItem("authToken");
  updateAuthUI(token);
  checkTokenExpiration();

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const authContainer = document.querySelector(".auth");
  if (authContainer) {
    authContainer.style.visibility = "visible";
  } else {
    console.warn("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç .auth –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM!");
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ profile.html)
  if (window.location.pathname.includes("profile.html")) {
    loadUserProfile();
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
  const connectWalletBtn = document.getElementById("connectWalletBtn");
  if (connectWalletBtn) {
    connectWalletBtn.addEventListener("click", connectWallet);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
  setInterval(updateBalance, 30000);

  // –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const languageBtn = document.getElementById("languageBtn");
  const languageDropdown = document.getElementById("languageDropdown");
  if (languageBtn && languageDropdown) {
    languageBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      languageDropdown.classList.toggle("visible");
    });
    languageDropdown.querySelectorAll("li").forEach((item) => {
      item.addEventListener("click", (e) => {
        const selectedLang = e.target.getAttribute("data-lang");
        document.getElementById("currentLang").textContent = selectedLang.toUpperCase();
        languageDropdown.classList.remove("visible");
        translatePage(selectedLang);
      });
    });
    translatePage("ru");
  }

  // –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ email
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authForm = document.getElementById("authForm");
if (authForm) {
  authForm.addEventListener("submit", function (e) {
    e.preventDefault();
    const email = document.getElementById("email").value;
    const password = document.getElementById("password").value;
    const errorContainer = document.getElementById("loginError"); // –ë–ª–æ–∫ –¥–ª—è –æ—à–∏–±–∫–∏

    fetch("/api/login", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password })
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          localStorage.setItem("authToken", data.token);
          window.location.href = "index.html";
        } else {
          errorContainer.textContent = data.message; // –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º
          errorContainer.style.color = "red";
        }
      })
      .catch((err) => {
        errorContainer.textContent = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        errorContainer.style.color = "red";
      });
  });
}


  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞–º–∏ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞–º–∏ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const toggleRegisterBtn = document.getElementById("toggleRegisterBtn");
const registerForm = document.getElementById("registerForm");

if (toggleRegisterBtn && registerForm) {
  toggleRegisterBtn.addEventListener("click", () => {
    if (registerForm.style.display === "none" || !registerForm.style.display) {
      registerForm.style.display = "block";
      toggleRegisterBtn.textContent = "–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã? –í–æ–π—Ç–∏";
    } else {
      registerForm.style.display = "none";
      toggleRegisterBtn.textContent = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è";
    }
  });
}

if (registerForm) {
  registerForm.addEventListener("submit", function (e) {
    e.preventDefault();
    const email = document.getElementById("regEmail").value;
    const password = document.getElementById("regPassword").value;
    const errorContainer = document.getElementById("registerError");
    const successContainer = document.getElementById("registerSuccess");

    fetch("/api/register", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, password })
    })
      .then((res) => res.json())
      .then((data) => {
        if (data.success) {
          successContainer.textContent = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.";
          successContainer.style.color = "green";
          errorContainer.textContent = ""; // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
          registerForm.style.display = "none";
          toggleRegisterBtn.textContent = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è";
        } else {
          errorContainer.textContent = data.message;
          errorContainer.style.color = "red";
        }
      })
      .catch((err) => {
        errorContainer.textContent = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        errorContainer.style.color = "red";
      });
  });
}


  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Solana –∫–æ—à–µ–ª–µ–∫
  const solanaBtn = document.getElementById("solanaBtn");
  if (solanaBtn) {
    solanaBtn.addEventListener("click", async () => {
      const errorContainer = document.getElementById("solanaLoginError");
  
      if (!window.solana || !window.solana.isPhantom) {
        errorContainer.textContent = "Phantom –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!";
        errorContainer.style.color = "red";
        return;
      }
  
      try {
        const resp = await window.solana.connect();
        const walletAddress = resp.publicKey.toString();
  
        const message = "Login to Margo on SOL. Nonce: " + Date.now();
        const encodedMessage = new TextEncoder().encode(message);
        const signed = await window.solana.signMessage(encodedMessage, "utf8");
        const signature = btoa(String.fromCharCode(...signed.signature));
  
        const response = await fetch("/api/wallet-login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ walletAddress, message, signature }),
        });
  
        const data = await response.json();
        if (data.success) {
          localStorage.setItem("userToken", data.token);
          window.location.href = "index.html";
        } else {
          errorContainer.textContent = "–û—à–∏–±–∫–∞: " + data.message;
          errorContainer.style.color = "red";
        }
      } catch (err) {
        errorContainer.textContent = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ—à–µ–ª—å–∫—É: " + err.message;
        errorContainer.style.color = "red";
      }
    });
  }
  

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π (–Ω–∞ collections.html)
  const filterButtons = document.querySelectorAll(".filter-btn");
  if (filterButtons) {
    filterButtons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const filter = btn.getAttribute("data-filter");
        filterButtons.forEach((button) => button.classList.remove("active"));
        btn.classList.add("active");
        filterCollections(filter);
      });
    });

    function filterCollections(filter) {
      const cards = document.querySelectorAll(".collection-card");
      cards.forEach((card) => {
        const category = card.getAttribute("data-category");
        if (filter === "all" || filter === category) {
          card.style.display = "block";
        } else {
          card.style.display = "none";
        }
      });
    }
  }

  // Dashboard: Drag & Drop –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é
  const previewDragDropArea = document.getElementById("previewDragDropArea");
  const previewUpload = document.getElementById("previewUpload");
  const previewPreview = document.getElementById("previewPreview");
  if (previewDragDropArea) {
    previewDragDropArea.addEventListener("click", () => previewUpload.click());
    previewDragDropArea.addEventListener("dragover", (e) => {
      e.preventDefault();
      previewDragDropArea.classList.add("dragover");
    });
    previewDragDropArea.addEventListener("dragleave", () => {
      previewDragDropArea.classList.remove("dragover");
    });
    previewDragDropArea.addEventListener("drop", (e) => {
      e.preventDefault();
      previewDragDropArea.classList.remove("dragover");
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        displayPreview(files[0], previewPreview);
      }
    });
  }
  if (previewUpload) {
    previewUpload.addEventListener("change", function () {
      if (this.files.length > 0) {
        displayPreview(this.files[0], previewPreview);
      }
    });
  }
  function displayPreview(file, container) {
    const reader = new FileReader();
    reader.onload = function (e) {
      container.innerHTML = `<img src="${e.target.result}" alt="Preview Image" style="max-width:150px; max-height:150px;">`;
    };
    reader.readAsDataURL(file);
  }

  // Dashboard: Drag & Drop –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const collectionDragDropArea = document.getElementById("collectionDragDropArea");
  const collectionUpload = document.getElementById("collectionUpload");
  const collectionPreview = document.getElementById("collectionPreview");
  if (collectionDragDropArea) {
    collectionDragDropArea.addEventListener("click", () => collectionUpload.click());
    collectionDragDropArea.addEventListener("dragover", (e) => {
      e.preventDefault();
      collectionDragDropArea.classList.add("dragover");
    });
    collectionDragDropArea.addEventListener("dragleave", () => {
      collectionDragDropArea.classList.remove("dragover");
    });
    collectionDragDropArea.addEventListener("drop", (e) => {
      e.preventDefault();
      collectionDragDropArea.classList.remove("dragover");
      const files = e.dataTransfer.files;
      displayMultipleFiles(files, collectionPreview);
    });
  }
  if (collectionUpload) {
    collectionUpload.addEventListener("change", function () {
      if (this.files.length > 0) {
        displayMultipleFiles(this.files, collectionPreview);
      }
    });
  }
  function displayMultipleFiles(files, container) {
    container.innerHTML = "";
    Array.from(files).forEach((file) => {
      const reader = new FileReader();
      reader.onload = function (e) {
        const element = document.createElement("div");
        element.innerHTML = `<img src="${e.target.result}" alt="Collection File" style="max-width:100px; max-height:100px; margin:5px;">`;
        container.appendChild(element);
      };
      reader.readAsDataURL(file);
    });
  }

  // –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (Dashboard)
  const uploadForm = document.getElementById("uploadForm");
  if (uploadForm) {
    uploadForm.addEventListener("submit", function (e) {
      e.preventDefault();
      const title = document.getElementById("collectionTitle").value;
      const description = document.getElementById("collectionDescription").value;
      const price = document.getElementById("collectionPrice").value;
      const token = localStorage.getItem("authToken") || "";
      const formData = new FormData();
      formData.append("collectionTitle", title);
      formData.append("collectionDescription", description);
      formData.append("collectionPrice", price);
      formData.append("token", token);
      if (previewUpload.files[0]) {
        formData.append("preview", previewUpload.files[0]);
      }
      if (collectionUpload.files.length > 0) {
        Array.from(collectionUpload.files).forEach((file) => {
          formData.append("collection", file);
        });
      }
      fetch("/api/upload", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${token}`
        },
        body: formData
      })
        .then((res) => res.json())
        .then((data) => {
          alert(data.message || "–ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞!");
          uploadForm.reset();
          previewPreview.innerHTML = "";
          collectionPreview.innerHTML = "";
          addCollectionToTable({
            title,
            description,
            price,
            views: 0,
            sales: 0,
            image: previewPreview.querySelector("img")
              ? previewPreview.querySelector("img").src
              : ""
          });
        })
        .catch((err) => console.error(err));
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É (–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
  function addCollectionToTable(collection) {
    const tableBody = document.getElementById("collectionsTable");
    if (!tableBody) return;

    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>
        ${
          collection.image
            ? `<img src="${collection.image}" alt="${collection.title}" width="50">`
            : "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        }
      </td>
      <td>${collection.title}</td>
      <td>${collection.views}</td>
      <td>${collection.sales}</td>
      <td>
        <button class="btn delete-btn">–£–¥–∞–ª–∏—Ç—å</button>
      </td>
    `;
    tableBody.appendChild(tr);
    tr.querySelector(".delete-btn").addEventListener("click", () => {
      if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–ª–ª–µ–∫—Ü–∏—é?")) {
        tr.remove();
      }
    });
  }
  console.log("üîç loadUserCollections() –≤—ã–∑–≤–∞–Ω–∞!");

  async function deleteCollection(id) {
    const token = localStorage.getItem("authToken");
    if (!token) return;
  
    try {
      const response = await fetch(`/api/delete-collection/${id}`, {
        method: "DELETE",
        headers: { "Authorization": `Bearer ${token}` },
      });
  
      const data = await response.json();
      if (data.success) {
        alert("–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!");
      } else {
        alert("–û—à–∏–±–∫–∞: " + data.message);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    console.log("üì¢ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏...");
    loadUserCollections();
  });
  
  console.log("üîç loadUserCollections() –≤—ã–∑–≤–∞–Ω–∞!");

  async function loadUserCollections() {
    console.log("üöÄ loadUserCollections() –≤—ã–∑–≤–∞–Ω–∞!");
    const token = localStorage.getItem("authToken");
    if (!token) {
        console.log("‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å.");
        return;
    }
    console.log("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/user-collections...");

    try {
        const response = await fetch("/api/user-collections", {
            method: "GET",
            headers: { "Authorization": `Bearer ${token}` },
        });

        console.log("üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
        const data = await response.json();
        console.log("üìÇ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);

        if (data.success) {
            console.log("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data.collections);
            renderCollections(data.collections);
        } else {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", data.message);
        }
    } catch (err) {
        console.error("üî• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤ –∫–æ–Ω—Å–æ–ª–∏
window.loadUserCollections = loadUserCollections;


  
  // –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  function renderCollections(collections) {
    const tableBody = document.getElementById("collectionsTable");
    if (!tableBody) return;
  
    tableBody.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫
  
    collections.forEach((collection) => {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td><img src="${collection.preview}" width="50"></td>
        <td>${collection.title}</td>
        <td>${collection.views}</td>
        <td>${collection.sales}</td>
        <td>
          <button class="btn delete-btn" data-id="${collection.id}">–£–¥–∞–ª–∏—Ç—å</button>
        </td>
      `;
  
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
      row.querySelector(".delete-btn").addEventListener("click", async () => {
        if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é?")) {
          await deleteCollection(collection.id);
          row.remove();
        }
      });
  
      tableBody.appendChild(row);
    });
  }
  
  // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  document.addEventListener("DOMContentLoaded", loadUserCollections);
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —à–∞–ø–∫–µ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è vs –ø—Ä–æ—Ñ–∏–ª—å)
  const authBtn = document.querySelector(".auth .auth-btn");
  const profileBtn = document.querySelector(".auth .profile-btn");
  if (authBtn && profileBtn) {
    const token = localStorage.getItem("authToken");
    if (token) {
      authBtn.style.display = "none";
      profileBtn.style.display = "inline-block";
    } else {
      authBtn.style.display = "inline-block";
      profileBtn.style.display = "none";
    }
  }

  const solanaWeb3 = window.solanaWeb3 || {};
const { Transaction, Connection, clusterApiUrl } = solanaWeb3;

// ======= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64 –≤ Uint8Array =======
function base64ToUint8Array(base64) {
  const binaryString = window.atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes;
}

const observer = new MutationObserver((mutationsList) => {
  mutationsList.forEach((mutation) => {
    if (mutation.type === "childList") {
      const buyButtons = document.querySelectorAll(".buy-btn");
      console.log(`üîç –û–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: ${buyButtons.length}`);

      buyButtons.forEach((btn) => {
        if (!btn.dataset.listenerAdded) {
          btn.addEventListener("click", handleBuyClick);
          btn.dataset.listenerAdded = "true"; // –ü–æ–º–µ—Ç–∫–∞, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
        }
      });
    }
  });
});

// –ó–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ body
observer.observe(document.body, { childList: true, subtree: true });
const Message = solanaWeb3.Message || solanaWeb3.TransactionMessage;


async function checkAuthorAccess() {
  // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è (–¥–æ 2 —Å–µ–∫, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
  await new Promise(resolve => setTimeout(resolve, 500));

  const dashboardLink = document.querySelector('.nav-links a[data-i18n="navDashboard"]');

  if (!dashboardLink) {
    console.warn("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    return;
  }

  const token = localStorage.getItem("authToken");
  if (!token) {
    dashboardLink.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
    return;
  }

  try {
    const response = await fetch("/api/check-author", {
      method: "GET",
      headers: { "Authorization": `Bearer ${token}` },
    });

    const data = await response.json();
    if (!data.isApproved) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –∞–≤—Ç–æ—Ä, —Å–∫—Ä—ã–≤–∞–µ–º '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'.");
      dashboardLink.style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
    } else {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω –∫–∞–∫ –∞–≤—Ç–æ—Ä, –æ—Å—Ç–∞–≤–ª—è–µ–º '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∞:", error);
    dashboardLink.style.display = "none"; // –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
document.addEventListener("DOMContentLoaded", () => {
  setTimeout(checkAuthorAccess, 1000);
});


// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", checkAuthorAccess);


// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏
// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏
async function handleBuyClick(event) {
  const btn = event.target;
  let messageContainer = btn.nextElementSibling;

  // –ï—Å–ª–∏ —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
  if (!messageContainer) {
    messageContainer = document.createElement("div");
    btn.parentNode.insertBefore(messageContainer, btn.nextSibling);
  }
  
  function showMessage(message, isError = true) {
    messageContainer.textContent = message;
    messageContainer.style.color = isError ? 'red' : 'green';
  }

  const token = localStorage.getItem("authToken");
  if (!token) {
    showMessage("‚ùå –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É.");
    return;
  }
  
  const collectionId = btn.getAttribute("data-id");
  const priceInSOL = parseFloat(btn.getAttribute("data-price")) || 0;

  if (!window.solana || !window.solana.isPhantom) {
    showMessage("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Phantom –∫–æ—à–µ–ª–µ–∫!");
    return;
  }

  try {
    const wallet = await window.solana.connect();
    const walletAddress = wallet.publicKey.toString();

    showMessage("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É...", false);

    if (isNaN(priceInSOL)) {
      showMessage("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞!");
      return;
    }
    if (!window.solana.isConnected) {
      showMessage("‚ùå –û—à–∏–±–∫–∞: –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –µ–≥–æ.");
      await window.solana.connect();
    }
    
    const response = await fetch("/api/sol-purchase", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
      body: JSON.stringify({ collectionId, amount: priceInSOL, buyerWallet: walletAddress })
    });
    
    const data = await response.json();
    if (!data.success) {
      showMessage("‚ùå –û—à–∏–±–∫–∞: " + data.message);
      return;
    }

    const transactionBytes = base64ToUint8Array(data.transaction);
    let transaction;
    
    try {
      transaction = solanaWeb3.Transaction.from(transactionBytes);
      showMessage("üìú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞.", false);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
      showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!");
      return;
    }
    
    try {
      transaction = Transaction.from(transactionBytes);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
      showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!");
      return;
    }
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ Phantom
    const signedTransaction = await window.solana.signTransaction(transaction);
    showMessage("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞.", false);
    
    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const rawTransaction = signedTransaction.serialize();
    showMessage("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...", false);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–µ—Ç—å Solana
    const connection = new Connection("https://mainnet.helius-rpc.com/?api-key=10fe9bff-ebe2-4760-9adb-c1d26b87bd68", "confirmed");

    let txid;
    try {
      txid = await connection.sendRawTransaction(rawTransaction, {
        skipPreflight: false,
        preflightCommitment: "processed"
      });
      showMessage(`üöÄ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! ID: ${txid}`, false);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
      showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—à–µ–ª–µ–∫.");
      return;
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    let confirmed = false;
    while (!confirmed) {
      await new Promise(resolve => setTimeout(resolve, 5000));
      const confirmation = await connection.getTransaction(txid, { commitment: "confirmed" });
      if (confirmation) confirmed = true;
    }
    
    const checkResponse = await fetch("/api/check-payment", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      },
      body: JSON.stringify({ collectionId, signature: txid })
    });
    
    const checkData = await checkResponse.json();
    if (checkData.success) {
      showMessage("üéâ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.", false);
    } else {
      showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: " + checkData.message);
    }
  
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ:", error);
    showMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—à–µ–ª–µ–∫.");
  }
}

})

document.addEventListener("DOMContentLoaded", function () {
  const menuToggle = document.querySelector(".menu-toggle");
  const navLinks = document.querySelector(".nav-links");

  menuToggle.addEventListener("click", function () {
    navLinks.classList.toggle("active");
  });
});
