const express = require("express");
const app = express();
const cors = require("cors");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const multer = require("multer");
const { Pool } = require("pg");
require("dotenv").config();
const morgan = require("morgan");
const winston = require("winston");
const path = require("path");
const {
  Connection,
  PublicKey,
  Transaction,
  SystemProgram
} = require("@solana/web3.js");
const nacl = require("tweetnacl");
const { TextEncoder } = require("util");
const { body, validationResult } = require("express-validator");
const crypto = require("crypto");

// ========== WINSTON –õ–û–ì–ì–ï–† ==========
const { combine, timestamp, printf, colorize } = winston.format;
const logFormat = printf(({ level, message, timestamp }) => {
  return `${timestamp} ${level}: ${message}`;
});
const logger = winston.createLogger({
  level: "info",
  format: combine(timestamp(), logFormat),
  transports: [
    new winston.transports.File({ filename: "logs/error.log", level: "error" }),
    new winston.transports.File({ filename: "logs/combined.log" })
  ]
});
if (process.env.NODE_ENV !== "production") {
  logger.add(
    new winston.transports.Console({
      format: combine(colorize(), timestamp(), logFormat)
    })
  );
}

// ========== MORGAN –¥–ª—è HTTP –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ==========
app.use(
  morgan("combined", {
    stream: { write: (message) => logger.info(message.trim()) }
  })
);

// ========== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö PostgreSQL ==========
const pool = new Pool({
  connectionString: process.env.DATABASE_URL, 
  ssl: {
    rejectUnauthorized: false
  }
});

pool.connect((err) => {
  if (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: " + err);
  } else {
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL");
  }
});

// ========== –ú–ò–î–î–õ–í–ê–†–´ ==========
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°–µ–∫—Ä–µ—Ç –¥–ª—è JWT
const JWT_SECRET = process.env.JWT_SECRET || "jwt_secret_key";

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static(path.join(__dirname, "public")));
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Multer –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "uploads/");
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + "-" + file.originalname;
    cb(null, uniqueSuffix);
  }
});
const upload = multer({ storage: storage });

// –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});
app.get("/about", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "about.html"));
});
app.get("/collections", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "collections.html"));
});
app.get("/dashboard", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "dashboard.html"));
});
app.get("/login", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "login.html"));
});
app.get("/profile", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "profile.html"));
});

// ========== AUTHENTICATE TOKEN –ú–ò–î–î–õ–í–ê–† ==========
function authenticateToken(req, res, next) {
  console.log("üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", req.headers);
  
  const token = req.headers.authorization?.split(" ")[1];

  if (!token) {
    console.log("‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    return res.status(401).json({ success: false, message: "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      console.log("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω:", err.message);
      return res.status(403).json({ success: false, message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" });
    }

    console.log("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user);
    req.user = user;
    next();
  });
}



// ========== API –ú–ê–†–®–†–£–¢–´ ==========

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ email (—á–µ—Ä–µ–∑ –±–∞–∑—É)
app.post("/api/register", async (req, res) => {
  const { email, password } = req.body;
  logger.info(`–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: ${JSON.stringify(req.body)}`);
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ email
    const existingUser = await pool.query(
      "SELECT id FROM users WHERE email = $1",
      [email]
    );
    if (existingUser.rows.length > 0) {
      return res.status(400).json({
        success: false,
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
      });
    }
    const hashedPassword = await bcrypt.hash(password, 10);
    logger.info(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: ${email}, ${hashedPassword}`);
    const result = await pool.query(
      "INSERT INTO users (email, password, username) VALUES ($1, $2, $3) RETURNING id, email, username",
      [email, hashedPassword, email.split("@")[0]]
    );
    res.status(201).json({ success: true, user: result.rows[0] });
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + err.message);
    res
      .status(500)
      .json({ success: false, message: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
  }
});

// –í—Ö–æ–¥ –ø–æ email
app.post("/api/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const result = await pool.query("SELECT * FROM users WHERE email = $1", [
      email
    ]);
    if (result.rows.length === 0) {
      return res
        .status(401)
        .json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    const user = result.rows[0];
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res
        .status(401)
        .json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
    }
    const token = jwt.sign(
      { userId: user.id, email: user.email, username: user.username, wallet: user.wallet },
      JWT_SECRET,
      { expiresIn: "1d" }
    );
    res.json({ success: true, token });
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + err.message);
    res
      .status(500)
      .json({ success: false, message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" });
  }
});

// –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Solana –∫–æ—à–µ–ª—ë–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∏
app.post("/api/wallet-login", async (req, res) => {
  const { walletAddress, message, signature } = req.body;
  if (!walletAddress || !message || !signature) {
    return res.status(400).json({
      success: false,
      message: "walletAddress, message –∏ signature –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
    });
  }
  try {
    const publicKey = new PublicKey(walletAddress);
    const messageBytes = new TextEncoder().encode(message);
    const signatureBytes = Uint8Array.from(
      Buffer.from(signature, "base64")
    );
    const verified = nacl.sign.detached.verify(
      messageBytes,
      signatureBytes,
      publicKey.toBytes()
    );
    if (!verified) {
      return res
        .status(401)
        .json({ success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏" });
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º –≤ –ë–î
    let result = await pool.query("SELECT * FROM users WHERE wallet = $1", [
      walletAddress
    ]);
    let user;
    if (result.rows.length === 0) {
      const username = walletAddress.substring(0, 8);
      result = await pool.query(
        "INSERT INTO users (wallet, username) VALUES ($1, $2) RETURNING *",
        [walletAddress, username]
      );
      user = result.rows[0];
    } else {
      user = result.rows[0];
    }
    const token = jwt.sign(
      { userId: user.id, wallet: user.wallet, username: user.username },
      JWT_SECRET,
      { expiresIn: "1d" }
    );
    res.json({ success: true, token });
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –≤ /api/wallet-login: " + err.message);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏"
    });
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
app.post("/api/connect-wallet", authenticateToken, async (req, res) => {
  console.log("üîπ –ó–∞–ø—Ä–æ—Å –Ω–∞ /api/connect-wallet:", req.body);
  console.log("üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", req.user);

  const { walletAddress } = req.body;

  if (!walletAddress) {
    console.error("‚ùå –û—à–∏–±–∫–∞: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω!");
    return res.status(400).json({ success: false, message: "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –∫–æ—à–µ–ª–µ–∫ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const existing = await pool.query("SELECT id FROM users WHERE wallet = $1 AND id != $2", [walletAddress, req.user.userId]);
    if (existing.rows.length > 0) {
      return res.status(400).json({ success: false, message: "–≠—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await pool.query(
      "UPDATE users SET wallet = $1 WHERE id = $2 RETURNING *",
      [walletAddress, req.user.userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({ success: true, message: "–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω!", walletAddress });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:", err);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞" });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
app.get("/api/user-collections", authenticateToken, async (req, res) => {
  try {
    const result = await pool.query(
      "SELECT * FROM collections WHERE created_by = $1",
      [req.user.userId]
    );
    res.json({ success: true, collections: result.rows });
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π: " + err.message);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π"
    });
  }
});


// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
app.get("/api/all-collections", async (req, res) => {
  try {
    const result = await pool.query("SELECT * FROM collections");
    res.json({ success: true, collections: result.rows });
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π: " + err.message);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π"
    });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º authenticateToken)
app.post(
  "/api/upload",
  authenticateToken,
  upload.fields([
    { name: "preview", maxCount: 1 },
    { name: "collection", maxCount: 10 }
  ]),
  async (req, res) => {
    try {
      const files = req.files;
      const { collectionTitle, collectionDescription, collectionPrice } = req.body;
      logger.info("–§–∞–π–ª—ã: " + JSON.stringify(files));
      logger.info("–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: " + JSON.stringify(req.body));
      if (!files || !files.preview || !files.collection) {
        return res.status(400).json({
          success: false,
          message: "–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        });
      }
      const previewPath = `/uploads/${files.preview[0].filename}`;
      const collectionFiles = files.collection.map(
        (file) => `/uploads/${file.filename}`
      );
      const result = await pool.query(
        "INSERT INTO collections (title, description, price, preview, files, created_by, views, sales) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *",
        [
          collectionTitle,
          collectionDescription,
          parseFloat(collectionPrice),
          previewPath,
          collectionFiles,
          req.user.userId,
          0,
          0
        ]
      );
      res.status(200).json({
        success: true,
        message: "–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        collection: result.rows[0]
      });
    } catch (err) {
      logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + err.message);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
      });
    }
  }
);

// –ü–æ–∫—É–ø–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º)
app.post(
  "/api/purchase",
  authenticateToken,
  body("collectionId")
    .isInt()
    .withMessage("ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"),
  async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res
        .status(400)
        .json({ success: false, errors: errors.array() });
    }
    try {
      const { collectionId } = req.body;
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await pool.query(
        "SELECT * FROM users WHERE id = $1",
        [req.user.userId]
      );
      if (userResult.rows.length === 0) {
        return res
          .status(404)
          .json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const collectionResult = await pool.query(
        "SELECT * FROM collections WHERE id = $1",
        [collectionId]
      );
      if (collectionResult.rows.length === 0) {
        return res
          .status(404)
          .json({ success: false, message: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∫—É–ø–ª–µ–Ω–∞ –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ä–∞–Ω–µ–µ
      const purchaseCheck = await pool.query(
        "SELECT * FROM purchases WHERE user_id = $1 AND collection_id = $2",
        [req.user.userId, collectionId]
      );
      if (purchaseCheck.rows.length > 0) {
        return res.json({
          success: true,
          message: "–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ –∫—É–ø–ª–µ–Ω–∞",
          accessKey: purchaseCheck.rows[0].access_key
        });
      }
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
      const accessKey = crypto.randomBytes(16).toString("hex");
      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
      await pool.query(
        "INSERT INTO purchases (user_id, collection_id, access_key) VALUES ($1, $2, $3)",
        [req.user.userId, collectionId, accessKey]
      );
      res.json({
        success: true,
        message: "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞",
        accessKey: accessKey
      });
    } catch (err) {
      next(err);
    }
  }
);

app.get("/api/collections", async (req, res) => {
  try {
    const result = await pool.query("SELECT * FROM collections");
    
    if (result.rows.length === 0) {
      return res.status(404).json({ success: false, message: "–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    res.json({ success: true, collections: result.rows });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:", err);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∫—É–ø–ª–µ–Ω–∞ –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ –∏, –µ—Å–ª–∏ –∫—É–ø–ª–µ–Ω–∞, –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞)
app.get("/api/is-purchased/:collectionId", authenticateToken, async (req, res, next) => {
  try {
    const { collectionId } = req.params;
    const purchaseResult = await pool.query(
      "SELECT * FROM purchases WHERE user_id = $1 AND collection_id = $2",
      [req.user.userId, collectionId]
    );
    if (purchaseResult.rows.length > 0) {
      res.json({ purchased: true, accessKey: purchaseResult.rows[0].access_key });
    } else {
      res.json({ purchased: false });
    }
  } catch (err) {
    next(err);
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –∫–ª—é—á–æ–º –¥–æ—Å—Ç—É–ø–∞)
app.get("/api/my-purchases", authenticateToken, async (req, res, next) => {
  try {
    const result = await pool.query(
      `SELECT p.*, c.title, c.description, c.price, c.preview 
       FROM purchases p 
       JOIN collections c ON p.collection_id = c.id 
       WHERE p.user_id = $1`,
      [req.user.userId]
    );
    res.json({ success: true, purchases: result.rows });
  } catch (err) {
    next(err);
  }
});

// ========== ERROR HANDLING –ú–ò–î–î–õ–í–ê–† ==========
function errorHandler(err, req, res, next) {
  logger.error("–û—à–∏–±–∫–∞: " + err.message);
  res.status(err.status || 500).json({ success: false, message: err.message });
}

app.use(errorHandler);

// === Solana-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ===
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC
const web3 = require("@solana/web3.js");

// 1. –ü—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞-URL (GenesysGo Shadow RPC)
const SOLANA_RPC_URL = "";


// 2. –°–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const solanaConnection = new web3.Connection(SOLANA_RPC_URL, "confirmed");

(async () => {
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
  console.log(await solanaConnection.getSlot());
})();



app.get("/api/balance/:walletAddress", async (req, res) => {
  const { walletAddress } = req.params;
  try {
    const publicKey = new PublicKey(walletAddress);
    const balance = await solanaConnection.getBalance(publicKey);
    res.json({ success: true, balance: balance / 1e9 }); // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ª–∞–º–ø–æ—Ä—Ç—ã –≤ SOL
  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: " + err.message);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞" });
  }
});

app.post("/api/sol-purchase", authenticateToken, async (req, res) => {
  console.log("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/sol-purchase:", req.body);
  
  const { collectionId, amount, buyerWallet } = req.body;
  if (!collectionId || !amount || !buyerWallet) {
    console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!");
    return res.status(400).json({ success: false, message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" });
  }

  console.log("üõ† –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:", { collectionId, amount, buyerWallet });

  try {
    const collectionResult = await pool.query("SELECT * FROM collections WHERE id = $1", [collectionId]);
    if (collectionResult.rows.length === 0) {
      return res.status(404).json({ success: false, message: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const sellerPublicKey = new PublicKey("CF6ga312fCGHNoPYp7PdNV8DHjH4giJvFSXQyQTzYJta");
    const buyerPublicKey = new PublicKey(buyerWallet);
    const lamports = amount * 1e9;

    // –ü–æ–ª—É—á–∞–µ–º blockhash
    const { blockhash } = await solanaConnection.getLatestBlockhash();
    console.log("üîó –ü–æ–ª—É—á–µ–Ω recentBlockhash:", blockhash);

    let transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: buyerPublicKey,
        toPubkey: sellerPublicKey,
        lamports: lamports
      })
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    transaction.recentBlockhash = blockhash;
    transaction.feePayer = buyerPublicKey;

    console.log("‚úÖ –ì–æ—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–ª–∏–µ–Ω—Ç—É:", transaction);
    
    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
    const serializedTransaction = transaction.serialize({ requireAllSignatures: false });
    const base64Transaction = Buffer.from(serializedTransaction).toString("base64");

    console.log("üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–ª–∏–µ–Ω—Ç:", {
      success: true,
      message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ –µ—ë –≤ Phantom.",
      transaction: base64Transaction
    });

    res.json({
      success: true,
      message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞. –ü–æ–¥–ø–∏—à–∏—Ç–µ –µ—ë –≤ Phantom.",
      transaction: base64Transaction
    });

  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", error: error.message });
  }
});

app.post("/api/check-payment", authenticateToken, async (req, res) => {
  const { collectionId, signature } = req.body;

  if (!collectionId || !signature) {
    return res.status(400).json({ success: false, message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" });
  }

  try {
    const transaction = await solanaConnection.getTransaction(signature, { commitment: "confirmed" });
    
    if (!transaction) {
      return res.status(400).json({ success: false, message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const expectedSeller = "CF6ga312fCGHNoPYp7PdNV8DHjH4giJvFSXQyQTzYJta";
    const expectedAmount = (await pool.query("SELECT price FROM collections WHERE id = $1", [collectionId])).rows[0].price;
    
    let sender = transaction.transaction.message.accountKeys[0].toString();
    let recipient = transaction.transaction.message.accountKeys[1].toString();
    let amount = transaction.meta.postBalances[1] - transaction.meta.preBalances[1];

    if (recipient !== expectedSeller || amount !== expectedAmount * 1e9) {
      return res.status(400).json({ success: false, message: "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å" });
    }

    const accessKey = crypto.randomBytes(16).toString("hex");

    await pool.query("INSERT INTO purchases (user_id, collection_id, access_key) VALUES ($1, $2, $3)", [
      req.user.userId, collectionId, accessKey
    ]);

    res.json({ success: true, message: "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", accessKey: accessKey });

  } catch (err) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: " + err.message);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞" });
  }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
app.get("/api/user-info", authenticateToken, async (req, res) => {
  try {
    console.log("–ó–∞–ø—Ä–æ—Å –∫ /api/user-info –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", req.user);
    const result = await pool.query("SELECT * FROM users WHERE id = $1", [req.user.userId]);
    if (result.rows.length === 0) {
      console.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î!");
      return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    res.json({
      success: true,
      username: result.rows[0].username,
      wallet: result.rows[0].wallet || "–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
      balance: result.rows[0].balance || 0
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ /api/user-info:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});


app.get("/api/check-author", authenticateToken, async (req, res) => {
  try {
    const user = await pool.query("SELECT is_approved FROM users WHERE id = $1", [req.user.userId]);

    if (user.rows.length === 0) {
      return res.status(404).json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    if (user.rows[0].is_approved) {
      return res.json({ success: true });
    } else {
      return res.status(403).json({ success: false, message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", err);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.delete("/api/delete-collection/:id", authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const collection = await pool.query("SELECT * FROM collections WHERE id = $1 AND created_by = $2", [id, req.user.userId]);

    if (collection.rows.length === 0) {
      return res.status(403).json({ success: false, message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
    }

    await pool.query("DELETE FROM collections WHERE id = $1", [id]);

    res.json({ success: true, message: "–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", err);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});


const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç ${port}`);
  console.log(`üåç –î–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: https://mar-production.up.railway.app`);

});

app.use((err, req, res, next) => {
  console.error("üî• –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
  res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
});
